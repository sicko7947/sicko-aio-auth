// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.15.6
// source: auth/authentication.proto

package auth_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_auth_authentication_proto protoreflect.FileDescriptor

var file_auth_authentication_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x63, 0x6f, 0x6f, 0x6b,
	0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32,
	0xda, 0x04, 0x0a, 0x0a, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x47,
	0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x50, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x15,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x13, 0x5a, 0x11,
	0x61, 0x75, 0x74, 0x68, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_auth_authentication_proto_goTypes = []interface{}{
	(*StreamAuthRequest)(nil),                   // 0: protobuf.StreamAuthRequest
	(*StreamDeactivateRequest)(nil),             // 1: protobuf.StreamDeactivateRequest
	(*StreamPollingRequest)(nil),                // 2: protobuf.StreamPollingRequest
	(*StreamGetCookieDataRequest)(nil),          // 3: protobuf.StreamGetCookieDataRequest
	(*StreamHandleSuccessCheckoutRequest)(nil),  // 4: protobuf.StreamHandleSuccessCheckoutRequest
	(*StreamRetrieveSuccessItemsRequest)(nil),   // 5: protobuf.StreamRetrieveSuccessItemsRequest
	(*StreamAuthResponse)(nil),                  // 6: protobuf.StreamAuthResponse
	(*StreamDeactivateResponse)(nil),            // 7: protobuf.StreamDeactivateResponse
	(*StreamPollingResponse)(nil),               // 8: protobuf.StreamPollingResponse
	(*StreamGetCookieDataResponse)(nil),         // 9: protobuf.StreamGetCookieDataResponse
	(*StreamHandleSuccessCheckoutResponse)(nil), // 10: protobuf.StreamHandleSuccessCheckoutResponse
	(*StreamRetrieveSuccessItemsResponse)(nil),  // 11: protobuf.StreamRetrieveSuccessItemsResponse
}
var file_auth_authentication_proto_depIdxs = []int32{
	0,  // 0: protobuf.AuthStream.Auth:input_type -> protobuf.StreamAuthRequest
	1,  // 1: protobuf.AuthStream.Deactivate:input_type -> protobuf.StreamDeactivateRequest
	2,  // 2: protobuf.AuthStream.Polling:input_type -> protobuf.StreamPollingRequest
	3,  // 3: protobuf.AuthStream.RequestCookieData:input_type -> protobuf.StreamGetCookieDataRequest
	4,  // 4: protobuf.AuthStream.HandleSuccessCheckout:input_type -> protobuf.StreamHandleSuccessCheckoutRequest
	5,  // 5: protobuf.AuthStream.RetrieveSuccess:input_type -> protobuf.StreamRetrieveSuccessItemsRequest
	6,  // 6: protobuf.AuthStream.Auth:output_type -> protobuf.StreamAuthResponse
	7,  // 7: protobuf.AuthStream.Deactivate:output_type -> protobuf.StreamDeactivateResponse
	8,  // 8: protobuf.AuthStream.Polling:output_type -> protobuf.StreamPollingResponse
	9,  // 9: protobuf.AuthStream.RequestCookieData:output_type -> protobuf.StreamGetCookieDataResponse
	10, // 10: protobuf.AuthStream.HandleSuccessCheckout:output_type -> protobuf.StreamHandleSuccessCheckoutResponse
	11, // 11: protobuf.AuthStream.RetrieveSuccess:output_type -> protobuf.StreamRetrieveSuccessItemsResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_auth_authentication_proto_init() }
func file_auth_authentication_proto_init() {
	if File_auth_authentication_proto != nil {
		return
	}
	file_auth_cookie_proto_init()
	file_auth_auth_proto_init()
	file_auth_handleSuccess_proto_init()
	file_auth_retrieveSuccess_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auth_authentication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auth_authentication_proto_goTypes,
		DependencyIndexes: file_auth_authentication_proto_depIdxs,
	}.Build()
	File_auth_authentication_proto = out.File
	file_auth_authentication_proto_rawDesc = nil
	file_auth_authentication_proto_goTypes = nil
	file_auth_authentication_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AuthStreamClient is the client API for AuthStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthStreamClient interface {
	Auth(ctx context.Context, opts ...grpc.CallOption) (AuthStream_AuthClient, error)
	Deactivate(ctx context.Context, opts ...grpc.CallOption) (AuthStream_DeactivateClient, error)
	Polling(ctx context.Context, opts ...grpc.CallOption) (AuthStream_PollingClient, error)
	RequestCookieData(ctx context.Context, opts ...grpc.CallOption) (AuthStream_RequestCookieDataClient, error)
	HandleSuccessCheckout(ctx context.Context, opts ...grpc.CallOption) (AuthStream_HandleSuccessCheckoutClient, error)
	RetrieveSuccess(ctx context.Context, opts ...grpc.CallOption) (AuthStream_RetrieveSuccessClient, error)
}

type authStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthStreamClient(cc grpc.ClientConnInterface) AuthStreamClient {
	return &authStreamClient{cc}
}

func (c *authStreamClient) Auth(ctx context.Context, opts ...grpc.CallOption) (AuthStream_AuthClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthStream_serviceDesc.Streams[0], "/protobuf.AuthStream/Auth", opts...)
	if err != nil {
		return nil, err
	}
	x := &authStreamAuthClient{stream}
	return x, nil
}

type AuthStream_AuthClient interface {
	Send(*StreamAuthRequest) error
	Recv() (*StreamAuthResponse, error)
	grpc.ClientStream
}

type authStreamAuthClient struct {
	grpc.ClientStream
}

func (x *authStreamAuthClient) Send(m *StreamAuthRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authStreamAuthClient) Recv() (*StreamAuthResponse, error) {
	m := new(StreamAuthResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authStreamClient) Deactivate(ctx context.Context, opts ...grpc.CallOption) (AuthStream_DeactivateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthStream_serviceDesc.Streams[1], "/protobuf.AuthStream/Deactivate", opts...)
	if err != nil {
		return nil, err
	}
	x := &authStreamDeactivateClient{stream}
	return x, nil
}

type AuthStream_DeactivateClient interface {
	Send(*StreamDeactivateRequest) error
	Recv() (*StreamDeactivateResponse, error)
	grpc.ClientStream
}

type authStreamDeactivateClient struct {
	grpc.ClientStream
}

func (x *authStreamDeactivateClient) Send(m *StreamDeactivateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authStreamDeactivateClient) Recv() (*StreamDeactivateResponse, error) {
	m := new(StreamDeactivateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authStreamClient) Polling(ctx context.Context, opts ...grpc.CallOption) (AuthStream_PollingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthStream_serviceDesc.Streams[2], "/protobuf.AuthStream/Polling", opts...)
	if err != nil {
		return nil, err
	}
	x := &authStreamPollingClient{stream}
	return x, nil
}

type AuthStream_PollingClient interface {
	Send(*StreamPollingRequest) error
	Recv() (*StreamPollingResponse, error)
	grpc.ClientStream
}

type authStreamPollingClient struct {
	grpc.ClientStream
}

func (x *authStreamPollingClient) Send(m *StreamPollingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authStreamPollingClient) Recv() (*StreamPollingResponse, error) {
	m := new(StreamPollingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authStreamClient) RequestCookieData(ctx context.Context, opts ...grpc.CallOption) (AuthStream_RequestCookieDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthStream_serviceDesc.Streams[3], "/protobuf.AuthStream/RequestCookieData", opts...)
	if err != nil {
		return nil, err
	}
	x := &authStreamRequestCookieDataClient{stream}
	return x, nil
}

type AuthStream_RequestCookieDataClient interface {
	Send(*StreamGetCookieDataRequest) error
	Recv() (*StreamGetCookieDataResponse, error)
	grpc.ClientStream
}

type authStreamRequestCookieDataClient struct {
	grpc.ClientStream
}

func (x *authStreamRequestCookieDataClient) Send(m *StreamGetCookieDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authStreamRequestCookieDataClient) Recv() (*StreamGetCookieDataResponse, error) {
	m := new(StreamGetCookieDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authStreamClient) HandleSuccessCheckout(ctx context.Context, opts ...grpc.CallOption) (AuthStream_HandleSuccessCheckoutClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthStream_serviceDesc.Streams[4], "/protobuf.AuthStream/HandleSuccessCheckout", opts...)
	if err != nil {
		return nil, err
	}
	x := &authStreamHandleSuccessCheckoutClient{stream}
	return x, nil
}

type AuthStream_HandleSuccessCheckoutClient interface {
	Send(*StreamHandleSuccessCheckoutRequest) error
	Recv() (*StreamHandleSuccessCheckoutResponse, error)
	grpc.ClientStream
}

type authStreamHandleSuccessCheckoutClient struct {
	grpc.ClientStream
}

func (x *authStreamHandleSuccessCheckoutClient) Send(m *StreamHandleSuccessCheckoutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authStreamHandleSuccessCheckoutClient) Recv() (*StreamHandleSuccessCheckoutResponse, error) {
	m := new(StreamHandleSuccessCheckoutResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authStreamClient) RetrieveSuccess(ctx context.Context, opts ...grpc.CallOption) (AuthStream_RetrieveSuccessClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AuthStream_serviceDesc.Streams[5], "/protobuf.AuthStream/RetrieveSuccess", opts...)
	if err != nil {
		return nil, err
	}
	x := &authStreamRetrieveSuccessClient{stream}
	return x, nil
}

type AuthStream_RetrieveSuccessClient interface {
	Send(*StreamRetrieveSuccessItemsRequest) error
	Recv() (*StreamRetrieveSuccessItemsResponse, error)
	grpc.ClientStream
}

type authStreamRetrieveSuccessClient struct {
	grpc.ClientStream
}

func (x *authStreamRetrieveSuccessClient) Send(m *StreamRetrieveSuccessItemsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authStreamRetrieveSuccessClient) Recv() (*StreamRetrieveSuccessItemsResponse, error) {
	m := new(StreamRetrieveSuccessItemsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthStreamServer is the server API for AuthStream service.
type AuthStreamServer interface {
	Auth(AuthStream_AuthServer) error
	Deactivate(AuthStream_DeactivateServer) error
	Polling(AuthStream_PollingServer) error
	RequestCookieData(AuthStream_RequestCookieDataServer) error
	HandleSuccessCheckout(AuthStream_HandleSuccessCheckoutServer) error
	RetrieveSuccess(AuthStream_RetrieveSuccessServer) error
}

// UnimplementedAuthStreamServer can be embedded to have forward compatible implementations.
type UnimplementedAuthStreamServer struct {
}

func (*UnimplementedAuthStreamServer) Auth(AuthStream_AuthServer) error {
	return status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedAuthStreamServer) Deactivate(AuthStream_DeactivateServer) error {
	return status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (*UnimplementedAuthStreamServer) Polling(AuthStream_PollingServer) error {
	return status.Errorf(codes.Unimplemented, "method Polling not implemented")
}
func (*UnimplementedAuthStreamServer) RequestCookieData(AuthStream_RequestCookieDataServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestCookieData not implemented")
}
func (*UnimplementedAuthStreamServer) HandleSuccessCheckout(AuthStream_HandleSuccessCheckoutServer) error {
	return status.Errorf(codes.Unimplemented, "method HandleSuccessCheckout not implemented")
}
func (*UnimplementedAuthStreamServer) RetrieveSuccess(AuthStream_RetrieveSuccessServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveSuccess not implemented")
}

func RegisterAuthStreamServer(s *grpc.Server, srv AuthStreamServer) {
	s.RegisterService(&_AuthStream_serviceDesc, srv)
}

func _AuthStream_Auth_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthStreamServer).Auth(&authStreamAuthServer{stream})
}

type AuthStream_AuthServer interface {
	Send(*StreamAuthResponse) error
	Recv() (*StreamAuthRequest, error)
	grpc.ServerStream
}

type authStreamAuthServer struct {
	grpc.ServerStream
}

func (x *authStreamAuthServer) Send(m *StreamAuthResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authStreamAuthServer) Recv() (*StreamAuthRequest, error) {
	m := new(StreamAuthRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthStream_Deactivate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthStreamServer).Deactivate(&authStreamDeactivateServer{stream})
}

type AuthStream_DeactivateServer interface {
	Send(*StreamDeactivateResponse) error
	Recv() (*StreamDeactivateRequest, error)
	grpc.ServerStream
}

type authStreamDeactivateServer struct {
	grpc.ServerStream
}

func (x *authStreamDeactivateServer) Send(m *StreamDeactivateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authStreamDeactivateServer) Recv() (*StreamDeactivateRequest, error) {
	m := new(StreamDeactivateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthStream_Polling_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthStreamServer).Polling(&authStreamPollingServer{stream})
}

type AuthStream_PollingServer interface {
	Send(*StreamPollingResponse) error
	Recv() (*StreamPollingRequest, error)
	grpc.ServerStream
}

type authStreamPollingServer struct {
	grpc.ServerStream
}

func (x *authStreamPollingServer) Send(m *StreamPollingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authStreamPollingServer) Recv() (*StreamPollingRequest, error) {
	m := new(StreamPollingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthStream_RequestCookieData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthStreamServer).RequestCookieData(&authStreamRequestCookieDataServer{stream})
}

type AuthStream_RequestCookieDataServer interface {
	Send(*StreamGetCookieDataResponse) error
	Recv() (*StreamGetCookieDataRequest, error)
	grpc.ServerStream
}

type authStreamRequestCookieDataServer struct {
	grpc.ServerStream
}

func (x *authStreamRequestCookieDataServer) Send(m *StreamGetCookieDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authStreamRequestCookieDataServer) Recv() (*StreamGetCookieDataRequest, error) {
	m := new(StreamGetCookieDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthStream_HandleSuccessCheckout_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthStreamServer).HandleSuccessCheckout(&authStreamHandleSuccessCheckoutServer{stream})
}

type AuthStream_HandleSuccessCheckoutServer interface {
	Send(*StreamHandleSuccessCheckoutResponse) error
	Recv() (*StreamHandleSuccessCheckoutRequest, error)
	grpc.ServerStream
}

type authStreamHandleSuccessCheckoutServer struct {
	grpc.ServerStream
}

func (x *authStreamHandleSuccessCheckoutServer) Send(m *StreamHandleSuccessCheckoutResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authStreamHandleSuccessCheckoutServer) Recv() (*StreamHandleSuccessCheckoutRequest, error) {
	m := new(StreamHandleSuccessCheckoutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthStream_RetrieveSuccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuthStreamServer).RetrieveSuccess(&authStreamRetrieveSuccessServer{stream})
}

type AuthStream_RetrieveSuccessServer interface {
	Send(*StreamRetrieveSuccessItemsResponse) error
	Recv() (*StreamRetrieveSuccessItemsRequest, error)
	grpc.ServerStream
}

type authStreamRetrieveSuccessServer struct {
	grpc.ServerStream
}

func (x *authStreamRetrieveSuccessServer) Send(m *StreamRetrieveSuccessItemsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authStreamRetrieveSuccessServer) Recv() (*StreamRetrieveSuccessItemsRequest, error) {
	m := new(StreamRetrieveSuccessItemsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AuthStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AuthStream",
	HandlerType: (*AuthStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Auth",
			Handler:       _AuthStream_Auth_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Deactivate",
			Handler:       _AuthStream_Deactivate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Polling",
			Handler:       _AuthStream_Polling_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RequestCookieData",
			Handler:       _AuthStream_RequestCookieData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "HandleSuccessCheckout",
			Handler:       _AuthStream_HandleSuccessCheckout_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "RetrieveSuccess",
			Handler:       _AuthStream_RetrieveSuccess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "auth/authentication.proto",
}
